<?php
namespace App\Controllers;

use App\Classes\Message;
use App\Classes\Keyboard;
use App\Classes\Button;
use App\Classes\Utils;

use App\Modules\Auth;
use App\Modules\Router;
use App\Modules\Menu;
use App\Modules\Shtrafs;
use App\Modules\TelegramApi;

use App\Models\Settings;
use App\Models\User;
use App\Models\Operation;

class PaymentController extends BaseController {

  public function payment($message, $photos, $text, $keyboard) {

    $user = Auth::user();
    $last_item = Router::last_item();

    if(!isset($last_item)) {
      $last_item = Menu::get_item($user->current_page);
    }

    $currency = 'RUB';
    $photo_available = false;

    if (isset($last_item['data'])) {
      if(isset($last_item['data']['currency'])) {
        $currency = $last_item['data']['currency'];
      }

      if(isset($last_item['data']['foto_available'])) {
        $photo_available = $last_item['data']['foto_available'];
      }
    }

    if($user->current_page != $last_item['id']) {
      $response = [];

      $response[] = new Message($last_item['title'], Keyboard::fromTemplate([[Button::$BACK]]));

      $user->current_page = $last_item['id'];
      // $text = $message;
      // $text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é</i> <b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: \nMTC 894124058</b>";
      $keyboard = new Keyboard(true);

      if(isset($last_item['data']) && isset($last_item['data']['id'])) {
        $data_id = $last_item['data']['id'];
        $sets = $user->settings($data_id);

        foreach ($sets as $val) {
          $keyboard->addButtonLine([['text' => $val->value, 'callback_data' => json_encode(['Payment', 'sel', $val->id])]]);
        }
      }

      $user->save();

      $response[] = new Message($text, $keyboard);
    } else {
      if($user->current_sub_page == 0) {

        if(isset($last_item['data']) && isset($last_item['data']['subscription'])) {
          $text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:';

          $subs = $last_item['data']['subscription'];
          $keyboard = new Keyboard();
          foreach ($subs as $sub) {
            $text = $text."\n<i>${sub[title]} ‚Äî ${sub[price]}</i>";
            $keyboard->addButtonLine([$sub['title']]);
          }
          $keyboard->addButtonLine([Button::$BACK]);
          $response = new Message($text, $keyboard);
        } else {
          $response = new Message("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ $currency, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª—É–≥—É:</b>");
        }
        $user->tmp = $message;

        if($photo_available && isset($photos) && count($photos) > 0) {
          $user->photo_id = $photos[count($photos) - 1]['file_id'];
        }

        $user->current_sub_page = 1;
        $user->save();
      } elseif ($user->current_sub_page == 1) {

        $summ = false;

        if(isset($last_item['data']) && isset($last_item['data']['subscription'])) {
          var_dump($message);
          $subs = $last_item['data']['subscription'];
          foreach ($subs as $sub) {
            if($sub['title'] == $message) {
              $summ = $sub['price'];
              break;
            }
          }
        } else {
          if(is_numeric($message)) {
            $summ = $message;
          }
        }

        if($summ !== false) {

          $min_pay = getenv('MIN_PAY');

          if($summ < $min_pay) {
            $response = new Message("<b>–í—ã —É–∫–∞–∑–∞–ª–∏ –±—É–∫–≤—ã, –ª–∏–±–æ —Å—É–º–º—É –º–µ–Ω—å—à—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ $min_pay —Ä—É–±.</b>\n<i>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>");
          } else {
            $user->current_sub_page = 2;
            $user->save();

            $amount = RateController::convert_to_minterpay($summ, $currency) + RateController::commission(0.01);

            $response = [];

            $response[] = new Message("–° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ <b>\n$amount minterpay</b>");
            $balance = WalletController::balance();
            if(isset($balance->MINTERPAY)) {
              if($balance->MINTERPAY < $amount) {
                $r = (new CommandController())->back('',NULL,'', new Keyboard());
                $r->setText("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –µ—â—ë ".($amount - $balance->MINTERPAY)." MINTERPAY");
                $response[] = $r;
              } else {
                $keyboard = new Keyboard();
                $keyboard->addButtonLine([Button::$ACCEPT]);
                $keyboard->addButtonLine([Button::$CANCEL]);
                $response[] = new Message("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'", $keyboard);
                $user->tmp = $user->tmp.'|'.$summ;
                $user->save();
              }
            }
          }
        } else {
          $response = new Message("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å.");
        }
      } elseif ($user->current_sub_page == 2 && $message == Button::$ACCEPT) {
        $data = explode('|', $user->tmp);
        $amount = RateController::convert_to_minterpay($data[1], $currency);
        WalletController::send(getenv('MAIN_WALLET'), $amount);
        $oper = new Operation([
          'chat_id' => $user->chat_id,
          'username' => $user->username,
          'data' => $data[0],
          'summ' => $data[1],
          'type' => 2,
          'ok' => 0
        ]);
        $oper->save();

        $title_menu = $last_item['title'];

        $notify_message = new Message("$title_menu\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $user->first_name $user->last_name\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: $data[0]\n–°—É–º–º–∞: $data[1] —Ä—É–±–ª–µ–π");
        $notify_keyboard = new Keyboard(true);
        $notify_keyboard->addButtonLine([Button::inline('–û–ø–ª–∞—á–µ–Ω–æ', 'Payment', 'compl', $oper->id)]);
        $notify_message->setKeyboard($notify_keyboard);

        if ($photo_available && $user->photo_id) {
          $notify_message->setPhoto($user->photo_id);
        }

        app()->notify($notify_message);

        $amount = $amount + RateController::commission(0.01);
        $response = (new CommandController())->back('',NULL,'', new Keyboard());
        $amount = Utils::format_number($amount);
        $response->setText("–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ $amount MINTERPAY. –ü–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.");
      }
    }

    return $response;

  }

  public function countries($message, $text, $keyboard) {
    $text = "–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –ø–æ–ø–æ–ª–Ω—è–µ–º —Å–æ—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ï—Å–ª–∏ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–ü–æ–∂–µ–ª–∞–Ω–∏—è</b>.
================
üáßüáæ     |   –ë–µ–ª–∞—Ä—É—Å—å +375
üá∑üá∫     |   –†–æ—Å—Å–∏—è +7
üá∫üá¶     |   –£–∫—Ä–∞–∏–Ω–∞ +380
================";
    return (new Message($text));
  }

  public function callback_query($data, $message) {
    if(count($data) > 1) {
      $action = $data[0];
      $value = $data[1];

      if($action == 'sel') {
        $s = Settings::get($value);
        $response = $this->payment($s->value, NULL, '', new Keyboard());
      } elseif ($action == 'compl') {
        $oper = Operation::get($value);
        $oper->ok = 1;
        $oper->save();
        TelegramApi::editMessageReplyMarkup($message['chat']['id'], $message['message_id'], new Keyboard(true));
        TelegramApi::sendMessage($oper->chat_id, new Message("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω."));
      }
    }
    if(!isset($response)) {
      $response = new Message('');
    }

    return $response;
  }

  public function taxes($message, $text, $keyboard) {
    $user = Auth::user();
    $last_item = Router::last_item();


  }

} ?>
